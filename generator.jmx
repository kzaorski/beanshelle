<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">pool</stringProp>
        <stringProp name="dbUrl">jdbc:sqlite:c:/eRU/eRU.sqlite</stringProp>
        <stringProp name="driver">org.sqlite.JDBC</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Konfiguracja csv" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CSV_ENCODING" elementType="Argument">
            <stringProp name="Argument.name">CSV_ENCODING</stringProp>
            <stringProp name="Argument.value">${__P(csv_encoding,ANSI)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ISO-8859-1</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;     

        GregorianCalendar data_ur = (GregorianCalendar) Calendar.getInstance();
        
        int wiek = (int) (Math.random()*(60+1-20))+20; // wiek od 20 do 60
        int miesiac = (int) (Math.random()*12);
            
        data_ur.roll(GregorianCalendar.YEAR, -wiek);   
        data_ur.set(GregorianCalendar.MONTH, miesiac);
        
        int dzien = (int) (Math.random()*data_ur.getActualMaximum(GregorianCalendar.DAY_OF_MONTH))+1;
        data_ur.set(GregorianCalendar.DAY_OF_MONTH, dzien);
            
        int PESEL12 = (int) data_ur.get(GregorianCalendar.YEAR) % 100;
        int PESEL34 = (int) (data_ur.get(GregorianCalendar.MONTH) + 1) + (((data_ur.get(GregorianCalendar.YEAR) / 100) - 19) * 20);

        NumberFormat nf2 = NumberFormat.getIntegerInstance();
        nf2.setMinimumIntegerDigits(2);
        NumberFormat nf4 = NumberFormat.getIntegerInstance();
        nf4.setMinimumIntegerDigits(4);
        nf4.setGroupingUsed(false);
        String PESEL = nf2.format(PESEL12) + nf2.format(PESEL34) + nf2.format(data_ur.get(GregorianCalendar.DAY_OF_MONTH)) + nf4.format((Math.random() * 10000));
        
        int[] wagi = {1, 3, 7, 9, 1, 3, 7, 9, 1, 3};
        int cyfra_kontrolna = 0;
        for (int i = 0; i &lt; 10; cyfra_kontrolna += wagi[i] * Character.getNumericValue(PESEL.charAt(i++)));
        
        cyfra_kontrolna %= 10;
        cyfra_kontrolna = 10 - cyfra_kontrolna;
        cyfra_kontrolna %= 10;
          
        PESEL = PESEL.concat(Integer.toString(cyfra_kontrolna));

        SimpleDateFormat df = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);

        vars.put(&quot;PESEL&quot;, PESEL);
        vars.put(&quot;DATA_UR&quot;, df.format(data_ur.getTime()));
        vars.put(&quot;PLEC&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;K&quot; : &quot;M&quot;);
        vars.put(&quot;IMIE&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;Janina&quot; : &quot;Jan&quot;);
        //vars.put(&quot;NAZWISKO&quot;, &quot;Å»urek&quot;);
        int nrTel = (int) (Math.random()*888888889)+111111111;
        vars.put(&quot;NR_TEL&quot;, Integer.toString(nrTel));
        vars.put(&quot;EMAIL&quot;, (Integer.toString(nrTel)+&quot;@ZTW.PZU.PL&quot;));
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1461675999000</longProp>
        <longProp name="ThreadGroup.end_time">1461675999000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="nazwiska" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">c:\nazwiska_czyste.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">NAZWISKO</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;     

        GregorianCalendar data_ur = (GregorianCalendar) Calendar.getInstance();
        
        int wiek = (int) (Math.random()*(60+1-20))+20; // wiek od 20 do 60
        int miesiac = (int) (Math.random()*12);
            
        data_ur.roll(GregorianCalendar.YEAR, -wiek);   
        data_ur.set(GregorianCalendar.MONTH, miesiac);
        
        int dzien = (int) (Math.random()*data_ur.getActualMaximum(GregorianCalendar.DAY_OF_MONTH))+1;
        data_ur.set(GregorianCalendar.DAY_OF_MONTH, dzien);
            
        int PESEL12 = (int) data_ur.get(GregorianCalendar.YEAR) % 100;
        int PESEL34 = (int) (data_ur.get(GregorianCalendar.MONTH) + 1) + (((data_ur.get(GregorianCalendar.YEAR) / 100) - 19) * 20);

        NumberFormat nf2 = NumberFormat.getIntegerInstance();
        nf2.setMinimumIntegerDigits(2);
        NumberFormat nf4 = NumberFormat.getIntegerInstance();
        nf4.setMinimumIntegerDigits(4);
        nf4.setGroupingUsed(false);
        String PESEL = nf2.format(PESEL12) + nf2.format(PESEL34) + nf2.format(data_ur.get(GregorianCalendar.DAY_OF_MONTH)) + nf4.format((Math.random() * 10000));
        
        int[] wagi = {1, 3, 7, 9, 1, 3, 7, 9, 1, 3};
        int cyfra_kontrolna = 0;
        for (int i = 0; i &lt; 10; cyfra_kontrolna += wagi[i] * Character.getNumericValue(PESEL.charAt(i++)));
        
        cyfra_kontrolna %= 10;
        cyfra_kontrolna = 10 - cyfra_kontrolna;
        cyfra_kontrolna %= 10;
          
        PESEL = PESEL.concat(Integer.toString(cyfra_kontrolna));

        SimpleDateFormat df = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);

        vars.put(&quot;PESEL&quot;, PESEL);
        vars.put(&quot;DATA_UR&quot;, df.format(data_ur.getTime()));
        vars.put(&quot;PLEC&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;K&quot; : &quot;M&quot;);
        vars.put(&quot;IMIE&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;Janina&quot; : &quot;Jan&quot;);
        //vars.put(&quot;NAZWISKO&quot;, &quot;Å»urek&quot;);
        int nrTel = (int) (Math.random()*888888889)+111111111;
        vars.put(&quot;NR_TEL&quot;, Integer.toString(nrTel));
        vars.put(&quot;EMAIL&quot;, (Integer.toString(nrTel)+&quot;@ZTW.PZU.PL&quot;));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Pobranie danych testowych" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="pesel" enabled="false">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">SELECT pesel FROM zkd where smiec = 0 limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">pesel</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="imie" enabled="true">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">SELECT imie FROM zkd ORDER BY RANDOM() LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">IMIE</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="dataUr" enabled="false">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">SELECT dataUr FROM zkd where smiec = 0 limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">dataUr</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="nazwisko" enabled="false">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">SELECT nazwisko FROM zkd ORDER BY RANDOM() LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">NAZWISKO</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="plec" enabled="false">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">SELECT plec FROM zkd where smiec = 0 limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">plec</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Update" enabled="false">
            <stringProp name="dataSource">pool</stringProp>
            <stringProp name="query">UPDATE zkd SET smiec = 1 where pesel = &apos;${pesel_1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">c:\dane.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;     

        GregorianCalendar data_ur = (GregorianCalendar) Calendar.getInstance();
        
        int wiek = (int) (Math.random()*(60+1-20))+20; // wiek od 20 do 60
        int miesiac = (int) (Math.random()*12);
            
        data_ur.roll(GregorianCalendar.YEAR, -wiek);   
        data_ur.set(GregorianCalendar.MONTH, miesiac);
        
        int dzien = (int) (Math.random()*data_ur.getActualMaximum(GregorianCalendar.DAY_OF_MONTH))+1;
        data_ur.set(GregorianCalendar.DAY_OF_MONTH, dzien);
            
        int PESEL12 = (int) data_ur.get(GregorianCalendar.YEAR) % 100;
        int PESEL34 = (int) (data_ur.get(GregorianCalendar.MONTH) + 1) + (((data_ur.get(GregorianCalendar.YEAR) / 100) - 19) * 20);

        NumberFormat nf2 = NumberFormat.getIntegerInstance();
        nf2.setMinimumIntegerDigits(2);
        NumberFormat nf4 = NumberFormat.getIntegerInstance();
        nf4.setMinimumIntegerDigits(4);
        nf4.setGroupingUsed(false);
        String PESEL = nf2.format(PESEL12) + nf2.format(PESEL34) + nf2.format(data_ur.get(GregorianCalendar.DAY_OF_MONTH)) + nf4.format((Math.random() * 10000));
        
        int[] wagi = {1, 3, 7, 9, 1, 3, 7, 9, 1, 3};
        int cyfra_kontrolna = 0;
        for (int i = 0; i &lt; 10; cyfra_kontrolna += wagi[i] * Character.getNumericValue(PESEL.charAt(i++)));
        
        cyfra_kontrolna %= 10;
        cyfra_kontrolna = 10 - cyfra_kontrolna;
        cyfra_kontrolna %= 10;
          
        PESEL = PESEL.concat(Integer.toString(cyfra_kontrolna));

        SimpleDateFormat df = new SimpleDateFormat(&quot;dd-MM-yyyy&quot;);

        vars.put(&quot;PESEL&quot;, PESEL);
        vars.put(&quot;DATA_UR&quot;, df.format(data_ur.getTime()));
        vars.put(&quot;PLEC&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;K&quot; : &quot;M&quot;);
        vars.put(&quot;IMIE&quot;, Character.getNumericValue(PESEL.charAt(9)) % 2 == 0 ? &quot;Janina&quot; : &quot;Jan&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(5,50)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
